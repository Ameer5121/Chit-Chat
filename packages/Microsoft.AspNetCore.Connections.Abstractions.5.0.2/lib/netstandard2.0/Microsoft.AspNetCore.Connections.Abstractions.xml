<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNetCore.Connections.Abstractions</name>
    </assembly>
    <members>
        <member name="P:Microsoft.AspNetCore.Connections.BaseConnectionContext.ConnectionId">
            <summary>
            Gets or sets a unique identifier to represent this connection in trace logs.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Connections.BaseConnectionContext.Features">
            <summary>
            Gets the collection of features provided by the server and middleware available on this connection.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Connections.BaseConnectionContext.Items">
            <summary>
            Gets or sets a key/value collection that can be used to share data within the scope of this connection.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Connections.BaseConnectionContext.ConnectionClosed">
            <summary>
            Triggered when the client connection is closed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Connections.BaseConnectionContext.LocalEndPoint">
            <summary>
            Gets or sets the local endpoint for this connection.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Connections.BaseConnectionContext.RemoteEndPoint">
            <summary>
            Gets or sets the remote endpoint for this connection.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.BaseConnectionContext.Abort">
            <summary>
            Aborts the underlying connection.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.BaseConnectionContext.Abort(Microsoft.AspNetCore.Connections.ConnectionAbortedException)">
            <summary>
            Aborts the underlying connection.
            </summary>
            <param name="abortReason">An optional <see cref="T:Microsoft.AspNetCore.Connections.ConnectionAbortedException"/> describing the reason the connection is being terminated.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.BaseConnectionContext.DisposeAsync">
            <summary>
            Releases resources for the underlying connection.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when resources have been released.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Connections.ConnectionContext">
            <summary>
            Encapsulates all information about an individual connection.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Connections.ConnectionContext.Transport">
            <summary>
            Gets or sets the <see cref="T:System.IO.Pipelines.IDuplexPipe"/> that can be used to read or write data on this connection.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.ConnectionContext.Abort(Microsoft.AspNetCore.Connections.ConnectionAbortedException)">
            <summary>
            Aborts the underlying connection.
            </summary>
            <param name="abortReason">An optional <see cref="T:Microsoft.AspNetCore.Connections.ConnectionAbortedException"/> describing the reason the connection is being terminated.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.ConnectionContext.Abort">
            <summary>
            Aborts the underlying connection.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Connections.ConnectionDelegate">
            <summary>
            A function that can process a connection.
            </summary>
            <param name="connection">A <see cref="T:Microsoft.AspNetCore.Connections.ConnectionContext" /> representing the connection.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the connection lifetime. When the task completes, the connection will be closed.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Connections.ConnectionHandler">
            <summary>
            Represents an endpoint that multiple connections connect to. For HTTP, endpoints are URLs, for non-HTTP it can be a TCP listener (or similar).
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.ConnectionHandler.OnConnectedAsync(Microsoft.AspNetCore.Connections.ConnectionContext)">
            <summary>
            Called when a new connection is accepted to the endpoint.
            </summary>
            <param name="connection">The new <see cref="T:Microsoft.AspNetCore.Connections.ConnectionContext"/></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the connection lifetime. When the task completes, the connection is complete.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.DefaultConnectionContext.#ctor(System.String)">
            <summary>
            Creates the DefaultConnectionContext without Pipes to avoid upfront allocations.
            The caller is expected to set the <see cref="P:Microsoft.AspNetCore.Connections.DefaultConnectionContext.Transport"/> and <see cref="P:Microsoft.AspNetCore.Connections.DefaultConnectionContext.Application"/> pipes manually.
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Microsoft.AspNetCore.Connections.Features.IConnectionCompleteFeature">
            <summary>
            Represents the completion action for a connection.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.Features.IConnectionCompleteFeature.OnCompleted(System.Func{System.Object,System.Threading.Tasks.Task},System.Object)">
            <summary>
            Registers a callback to be invoked after a connection has fully completed processing. This is
            intended for resource cleanup.
            </summary>
            <param name="callback">The callback to invoke after the connection has completed processing.</param>
            <param name="state">The state to pass into the callback.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Connections.Features.IConnectionInherentKeepAliveFeature">
            <summary>
            Indicates if the connection transport has an "inherent keep-alive", which means that the transport will automatically
            inform the client that it is still present.
            </summary>
            <remarks>
            The most common example of this feature is the Long Polling HTTP transport, which must (due to HTTP limitations) terminate
            each poll within a particular interval and return a signal indicating "the server is still here, but there is no data yet".
            This feature allows applications to add keep-alive functionality, but limit it only to transports that don't have some kind
            of inherent keep-alive.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Connections.FileHandleType">
            <summary>
            Enumerates the <see cref="T:Microsoft.AspNetCore.Connections.FileHandleEndPoint"/> types.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Connections.IConnectionBuilder">
            <summary>
            Defines an interface that provides the mechanisms to configure a connection pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Connections.IConnectionBuilder.ApplicationServices">
            <summary>
            Gets the <see cref="T:System.IServiceProvider"/> that provides access to the application's service container.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.IConnectionBuilder.Use(System.Func{Microsoft.AspNetCore.Connections.ConnectionDelegate,Microsoft.AspNetCore.Connections.ConnectionDelegate})">
            <summary>
            Adds a middleware delegate to the application's connection pipeline.
            </summary>
            <param name="middleware">The middleware delegate.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Connections.IConnectionBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.IConnectionBuilder.Build">
            <summary>
            Builds the delegate used by this application to process connections.
            </summary>
            <returns>The connection handling delegate.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Connections.IConnectionFactory">
            <summary>
            A factory abstraction for creating connections to an endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.IConnectionFactory.ConnectAsync(System.Net.EndPoint,System.Threading.CancellationToken)">
            <summary>
            Creates a new connection to an endpoint.
            </summary>
            <param name="endpoint">The <see cref="T:System.Net.EndPoint"/> to connect to.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1" /> that represents the asynchronous connect, yielding the <see cref="T:Microsoft.AspNetCore.Connections.ConnectionContext" /> for the new connection when completed.
            </returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Connections.IConnectionListener">
            <summary>
            Defines an interface that represents a listener bound to a specific <see cref="P:Microsoft.AspNetCore.Connections.IConnectionListener.EndPoint"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Connections.IConnectionListener.EndPoint">
            <summary>
            The endpoint that was bound. This may differ from the requested endpoint, such as when the caller requested that any free port be selected.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.IConnectionListener.AcceptAsync(System.Threading.CancellationToken)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when a connection is accepted, yielding the <see cref="T:Microsoft.AspNetCore.Connections.ConnectionContext" /> representing the connection.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.IConnectionListener.UnbindAsync(System.Threading.CancellationToken)">
            <summary>
            Stops listening for incoming connections.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the un-bind operation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Connections.IConnectionListenerFactory">
            <summary>
            Defines an interface that provides the mechanisms for binding to various types of <see cref="T:System.Net.EndPoint"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.IConnectionListenerFactory.BindAsync(System.Net.EndPoint,System.Threading.CancellationToken)">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Connections.IConnectionListener"/> bound to the specified <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <param name="endpoint">The <see cref="T:System.Net.EndPoint" /> to bind to.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the listener has been bound, yielding a <see cref="T:Microsoft.AspNetCore.Connections.IConnectionListener" /> representing the new listener.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Connections.Experimental.IMultiplexedConnectionListener">
            <summary>
            Defines an interface that represents a listener bound to a specific <see cref="P:Microsoft.AspNetCore.Connections.Experimental.IMultiplexedConnectionListener.EndPoint"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Connections.Experimental.IMultiplexedConnectionListener.EndPoint">
            <summary>
            The endpoint that was bound. This may differ from the requested endpoint, such as when the caller requested that any free port be selected.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.Experimental.IMultiplexedConnectionListener.UnbindAsync(System.Threading.CancellationToken)">
            <summary>
            Stops listening for incoming connections.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the un-bind operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.Experimental.IMultiplexedConnectionListener.AcceptAsync(Microsoft.AspNetCore.Http.Features.IFeatureCollection,System.Threading.CancellationToken)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection.
            </summary>
            <param name="features">A feature collection to pass options when accepting a connection.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when a connection is accepted, yielding the <see cref="T:Microsoft.AspNetCore.Connections.Experimental.MultiplexedConnectionContext" /> representing the connection.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Connections.Experimental.IMultiplexedConnectionBuilder">
            <summary>
            Defines an interface that provides the mechanisms to configure a connection pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Connections.Experimental.IMultiplexedConnectionBuilder.ApplicationServices">
            <summary>
            Gets the <see cref="T:System.IServiceProvider"/> that provides access to the application's service container.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.Experimental.IMultiplexedConnectionBuilder.Use(System.Func{Microsoft.AspNetCore.Connections.Experimental.MultiplexedConnectionDelegate,Microsoft.AspNetCore.Connections.Experimental.MultiplexedConnectionDelegate})">
            <summary>
            Adds a middleware delegate to the application's connection pipeline.
            </summary>
            <param name="middleware">The middleware delegate.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Connections.Experimental.IMultiplexedConnectionBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.Experimental.IMultiplexedConnectionBuilder.Build">
            <summary>
            Builds the delegate used by this application to process connections.
            </summary>
            <returns>The connection handling delegate.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Connections.Experimental.IMultiplexedConnectionFactory">
            <summary>
            A factory abstraction for creating connections to an endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.Experimental.IMultiplexedConnectionFactory.ConnectAsync(System.Net.EndPoint,Microsoft.AspNetCore.Http.Features.IFeatureCollection,System.Threading.CancellationToken)">
            <summary>
            Creates a new connection to an endpoint.
            </summary>
            <param name="endpoint">The <see cref="T:System.Net.EndPoint"/> to connect to.</param>
            <param name="features">A feature collection to pass options when connecting.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1" /> that represents the asynchronous connect, yielding the <see cref="T:Microsoft.AspNetCore.Connections.Experimental.MultiplexedConnectionContext" /> for the new connection when completed.
            </returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Connections.Experimental.IMultiplexedConnectionListenerFactory">
            <summary>
            Defines an interface that provides the mechanisms for binding to various types of <see cref="T:System.Net.EndPoint"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.Experimental.IMultiplexedConnectionListenerFactory.BindAsync(System.Net.EndPoint,Microsoft.AspNetCore.Http.Features.IFeatureCollection,System.Threading.CancellationToken)">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Connections.Experimental.IMultiplexedConnectionListener"/> bound to the specified <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <param name="endpoint">The <see cref="T:System.Net.EndPoint" /> to bind to.</param>
            <param name="features">A feature collection to pass options when binding.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the listener has been bound, yielding a <see cref="T:Microsoft.AspNetCore.Connections.Experimental.IMultiplexedConnectionListener" /> representing the new listener.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Connections.Experimental.MultiplexedConnectionContext">
            <summary>
            Encapsulates all information about a multiplexed connection.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.Experimental.MultiplexedConnectionContext.AcceptAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously accept an incoming stream on the connection.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.Experimental.MultiplexedConnectionContext.ConnectAsync(Microsoft.AspNetCore.Http.Features.IFeatureCollection,System.Threading.CancellationToken)">
            <summary>
            Creates an outbound connection 
            </summary>
            <param name="features"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Connections.Experimental.MultiplexedConnectionDelegate">
            <summary>
            A function that can process a connection.
            </summary>
            <param name="connection">A <see cref="T:Microsoft.AspNetCore.Connections.Experimental.MultiplexedConnectionContext" /> representing the connection.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the connection lifetime. When the task completes, the connection will be closed.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Connections.UriEndPoint">
            <summary>
            An <see cref="T:System.Net.EndPoint"/> defined by a <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Connections.UriEndPoint.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Connections.UriEndPoint"/> class.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> defining the <see cref="T:System.Net.EndPoint"/>.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Connections.UriEndPoint.Uri">
            <summary>
            The <see cref="T:System.Uri"/> defining the <see cref="T:System.Net.EndPoint"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Internal.ActivatorUtilities">
            <summary>
            Helper code for the various activator services.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(System.IServiceProvider,System.Type,System.Object[])">
            <summary>
            Instantiate a type with constructor arguments provided directly and/or from an <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="provider">The service provider used to resolve dependencies</param>
            <param name="instanceType">The type to activate</param>
            <param name="parameters">Constructor arguments not provided by the <paramref name="provider"/>.</param>
            <returns>An activated object of type instanceType</returns>
        </member>
        <member name="M:Microsoft.Extensions.Internal.ActivatorUtilities.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a delegate that will instantiate a type with constructor arguments provided directly
            and/or from an <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="instanceType">The type to activate</param>
            <param name="argumentTypes">
            The types of objects, in order, that will be passed to the returned function as its second parameter
            </param>
            <returns>
            A factory that will instantiate instanceType using an <see cref="T:System.IServiceProvider"/>
            and an argument array containing objects matching the types defined in argumentTypes
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance``1(System.IServiceProvider,System.Object[])">
            <summary>
            Instantiate a type with constructor arguments provided directly and/or from an <see cref="T:System.IServiceProvider"/>.
            </summary>
            <typeparam name="T">The type to activate</typeparam>
            <param name="provider">The service provider used to resolve dependencies</param>
            <param name="parameters">Constructor arguments not provided by the <paramref name="provider"/>.</param>
            <returns>An activated object of type T</returns>
        </member>
        <member name="M:Microsoft.Extensions.Internal.ActivatorUtilities.GetServiceOrCreateInstance``1(System.IServiceProvider)">
            <summary>
            Retrieve an instance of the given type from the service provider. If one is not found then instantiate it directly.
            </summary>
            <typeparam name="T">The type of the service</typeparam>
            <param name="provider">The service provider used to resolve dependencies</param>
            <returns>The resolved service or created instance</returns>
        </member>
        <member name="M:Microsoft.Extensions.Internal.ActivatorUtilities.GetServiceOrCreateInstance(System.IServiceProvider,System.Type)">
            <summary>
            Retrieve an instance of the given type from the service provider. If one is not found then instantiate it directly.
            </summary>
            <param name="provider">The service provider</param>
            <param name="type">The type of the service</param>
            <returns>The resolved service or created instance</returns>
        </member>
        <member name="T:Microsoft.Extensions.Internal.ActivatorUtilitiesConstructorAttribute">
            <summary>
            Marks the constructor to be used when activating type using <see cref="T:Microsoft.Extensions.Internal.ActivatorUtilities"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Internal.ObjectFactory">
            <summary>
            The result of <see cref="M:Microsoft.Extensions.Internal.ActivatorUtilities.CreateFactory(System.Type,System.Type[])"/>.
            </summary>
            <param name="serviceProvider">The <see cref="T:System.IServiceProvider"/> to get service arguments from.</param>
            <param name="arguments">Additional constructor arguments.</param>
            <returns>The instantiated type.</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
             for example through <see cref="N:System.Reflection"/>.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type"/> or <see cref="T:System.String"/>.
            
             When this attribute is applied to a location of type <see cref="T:System.String"/>, the assumption is
             that the string represents a fully qualified type name.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
